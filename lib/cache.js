// Generated by CoffeeScript 1.8.0
(function() {
  var CACHE_KEY_PREFIX, Cache, CacheItem;

  CACHE_KEY_PREFIX = 'cache:';

  CacheItem = (function() {
    function CacheItem(value, ttl) {
      this.value = value;
      this.expiresAt = new Date(new Date().getTime() + ttl * 1000);
    }

    return CacheItem;

  })();

  Cache = (function() {
    function Cache() {}

    Cache.prototype.set = function(key, value, _arg) {
      var item, ttl;
      ttl = _arg.ttl;
      item = new CacheItem(value, ttl);
      return localStorage.setItem(this._key(key), JSON.stringify(item));
    };

    Cache.prototype.get = function(key) {
      var _ref;
      this._purgeExpiredItems();
      return ((_ref = this._rawGet(this._key(key))) != null ? _ref.value : void 0) || null;
    };

    Cache.prototype._rawGet = function(key) {
      var item;
      item = localStorage.getItem(key);
      if (item) {
        return JSON.parse(item);
      }
    };

    Cache.prototype._key = function(name) {
      return CACHE_KEY_PREFIX + name;
    };

    Cache.prototype._purgeExpiredItems = function() {
      return _.chain(Object.keys(localStorage)).filter(function(key) {
        return new RegExp("^" + CACHE_KEY_PREFIX).test(key);
      }).map((function(_this) {
        return function(key) {
          return [key, _this._rawGet(key)];
        };
      })(this)).filter(function(_arg) {
        var item, key;
        key = _arg[0], item = _arg[1];
        return new Date(item.expiresAt) < new Date();
      }).each(function(_arg) {
        var item, key;
        key = _arg[0], item = _arg[1];
        return localStorage.removeItem(key);
      });
    };

    return Cache;

  })();

  module.exports = new Cache();

}).call(this);
