#!/usr/bin/env node
// Generated by CoffeeScript 1.9.3
(function() {
  var literalArgs, maji_package, parseBoolean, parsePort, path, program, runCmd, runNpm, runScript, spawn,
    slice = [].slice;

  spawn = require('child_process').spawn;

  path = require('path');

  maji_package = require('../package.json');

  parseBoolean = function(value) {
    return value === 'true';
  };

  parsePort = function(value) {
    return parseInt(value) || null;
  };

  program = require('commander');

  program.version(maji_package.version);

  runNpm = function(args, env_args) {
    if (env_args == null) {
      env_args = {};
    }
    return runCmd('npm', slice.call(args).concat(['--silent']), env_args);
  };

  runCmd = function(cmd, args, env_args) {
    var child, env, ref, ref1;
    if (env_args == null) {
      env_args = {};
    }
    env = Object.create(process.env);
    Object.assign(env, env_args);
    child = spawn(cmd, args, {
      env: env,
      stdio: 'inherit'
    });
    if ((ref = child.stdout) != null) {
      ref.on('data', function(data) {
        return process.stdout.write(data);
      });
    }
    if ((ref1 = child.stderr) != null) {
      ref1.on('data', function(data) {
        return process.stderr.write(data.toString());
      });
    }
    return child.on('exit', function(exitCode) {
      return process.exit(exitCode);
    });
  };

  runScript = function(scriptName, args, env_args) {
    if (env_args == null) {
      env_args = {};
    }
    return runCmd(path.resolve(__dirname + ("/../script/" + scriptName)), args, env_args);
  };

  literalArgs = function() {
    if (program.rawArgs.indexOf('--') === -1) {
      return [];
    } else {
      return program.rawArgs.slice(program.rawArgs.indexOf('--') + 1);
    }
  };

  program.command('new <package_name> <path>').description('Create a new Maji app').on('--help', function() {
    return console.log('  Example:\n  maji new org.example.my-app ~/Code/my-app');
  }).action(function(packageName, path) {
    if (!packageName.match(/.*\..*\..*/)) {
      console.log('Please specify a valid package name, for example org.example.my-app');
      process.exit(1);
    }
    return runScript('create-project', [packageName, path]);
  });

  program.command('run <platform>').description('Build and run a native app for the specified platform').option('-e, --emulator', 'run on emulator instead of an actual device').option('--env --environment [environment]', 'APP_ENV to run with [development]').action(function(platform, options) {
    var app_env, deviceTypeArg, env;
    app_env = options.environment || 'development';
    env = {
      'APP_ENV': app_env
    };
    deviceTypeArg = options.emulator ? '--emulator' : '--device';
    return runScript('run-on-device', [platform, deviceTypeArg].concat(slice.call(literalArgs())), env);
  });

  program.command('build [platform]').description('Build a native app for the specified platform').option('--release', 'create a release build').option('--env --environment [environment]', 'APP_ENV to build with [production]').action(function(platform, options) {
    var app_env, env, releaseArg;
    app_env = options.environment || 'production';
    env = {
      'APP_ENV': app_env
    };
    if (platform) {
      releaseArg = options.release ? '--release' : '--debug';
      return runScript('build-app', [platform, releaseArg].concat(slice.call(literalArgs())), env);
    } else {
      return runNpm(['run', 'build'], env);
    }
  });

  program.command('test').option('--watch', 'Run tests when project files change').option('--unit', 'Run unit tests').option('--integration', 'Run integration tests').description('Run your project tests').action(function(options) {
    if (options.watch) {
      return runNpm(['run', 'test:watch']);
    }
    if (options.unit) {
      return runNpm(['run', 'test:unit']);
    }
    if (options.integration) {
      return runNpm(['run', 'test:integration']);
    }
    return runNpm(['test']);
  });

  program.command('start').description('Run the maji dev server and compile changes on the fly').option('-p --port [port]', 'Port to listen on [9090]', parsePort, 9090).option('-l --livereload [flag]', 'Enable livereload [false]', parseBoolean, false).action(function(options) {
    var env;
    env = {
      'SERVER_PORT': options.port,
      'LIVERELOAD': options.livereload
    };
    return runNpm(['start'], env);
  });

  program.on('--help', function() {
    return process.exit(1);
  });

  program.on('*', function(action) {
    console.log("Unknown command '" + action + "'");
    return program.help();
  });

  program.parse(process.argv);

  if (!process.argv.slice(2).length) {
    program.help();
  }

}).call(this);
